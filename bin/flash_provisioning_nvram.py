#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# flash_provisioning_nvram.py
# This script generates the NVRAM content for fleet provisioning of the device by claim certificate
#
# The NVRAM content is generated by connecting to the target AWS Account and retrieving the relevant SSM parameters
# and Secrets. The NVRAM content is then generated and flashed to the device.
# Please make sure that AWS_DEFAULT_PROFILE is set to the correct profile before running this script.

import json
import os
import subprocess

import boto3
import random

import requests

iot_client = boto3.client('iot')
sm_client = boto3.client('secretsmanager')
ssm_client = boto3.client('ssm')

certRotationTemplateName = '/iot/rebelthings/roastapowah/cert-rotation-template'
provisioningCertKeyPair = '/iot/rebelthings/roastapowah/prov-cert-keys/*'
provisioningCertificates = '/iot/rebelthings/roastapowah/provisioning-certificates'
provisioningTemplateName = '/iot/rebelthings/roastapowah/prov-template-name'
thingType = 'roastapowah'

ROOT_CERT_URL = 'https://www.amazontrust.com/repository/AmazonRootCA1.pem'
NVRAM_IN_FILE = 'nvram.in'
NVRAM_BIN_FILE = 'nvram.bin'
NVRAM_SIZE = str(512 * 1024)


def generate_nvram_in(*, working_dir, thing_type, hardware_major, hardware_minor, prov_templ, rotate_templ,
                      ats_endpoint, jobs_endpoint, ca_cert, provisioning_cert, private_key):
    print("Generating nvram")
    # First generate nvram
    #
    # Need to add provisioniong template name
    #
    with open(os.path.join(working_dir, NVRAM_IN_FILE), 'w') as f:
        f.write('key,type,encoding,value\n')
        f.write('identity,namespace,,\n')
        f.write('thing_type,data,string,{}\n'.format(thing_type))
        f.write('hw_major,data,i8,{}\n'.format(hardware_major))
        f.write('hw_minor,data,i8,{}\n'.format(hardware_minor))
        f.write('prov_templ,data,string,{}\n'.format(prov_templ))
        f.write('rotate_templ,data,string,{}\n'.format(rotate_templ))
        f.write('ats_ep,data,string,{}\n'.format(ats_endpoint))
        f.write('jobs_ep,data,string,{}\n'.format(jobs_endpoint))
        f.write(f'ca_cert,data,string,"{ca_cert}"\n')
        f.write(f'prov_cert,data,string,"{provisioning_cert}"\n')
        f.write(f'prov_key,data,string,"{private_key}"\n')


def generate_nvram_bin(working_dir):
    print("Generating NVRAM content")

    # Get root CA
    ca_cert = requests.get(ROOT_CERT_URL).content.decode('utf-8')

    ats_endpoint = iot_client.describe_endpoint(endpointType='iot:Data-ATS')['endpointAddress'].strip()
    jobs_endpoint = iot_client.describe_endpoint(endpointType='iot:Jobs')['endpointAddress'].strip()

    # READ SSM PARAMS
    prov_template_name = ssm_client.get_parameter(Name=provisioningTemplateName)['Parameter']['Value']
    rot_template_name = ssm_client.get_parameter(Name=certRotationTemplateName)['Parameter']['Value']
    cert_arns = json.loads(ssm_client.get_parameter(Name=provisioningCertificates)['Parameter']['Value'])

    # Pick one of the provisioning certs randomly
    idx = random.randrange(0, len(cert_arns) - 1)
    principal_name = cert_arns[idx].split('/')[-1]

    # get the cert
    cert_info = iot_client.describe_certificate(certificateId=principal_name)
    provisioning_cert = cert_info['certificateDescription']['certificatePem']

    # now retrieve secrets for this principal
    cert_path = provisioningCertKeyPair.replace('*', principal_name)
    secret = sm_client.get_secret_value(SecretId=cert_path)
    secret_json = json.loads(secret['SecretString'])
    private_key = fix_b64_content(secret_json['PrivateKey'])

    generate_nvram_in(
        working_dir=working_dir,
        thing_type=thingType,
        hardware_major=1,
        hardware_minor=1,
        prov_templ=prov_template_name,
        rotate_templ=rot_template_name,
        ats_endpoint=ats_endpoint,
        jobs_endpoint=jobs_endpoint,
        ca_cert=ca_cert,
        provisioning_cert=provisioning_cert,
        private_key=private_key)

    # Convert to bin file ready for flashing later
    generator = f"{os.environ['IDF_PATH']}/components/nvs_flash/nvs_partition_generator/nvs_partition_gen.py"
    subprocess.call([generator, "generate",
                     os.path.join(working_dir, NVRAM_IN_FILE),
                     os.path.join(working_dir, NVRAM_BIN_FILE),
                     NVRAM_SIZE])


def flash_nvram(working_dir):
    subprocess.call(["esptool.py", "write_flash", "0x00475000", os.path.join(working_dir, NVRAM_BIN_FILE)])


def fix_b64_content(cert):
    splits = cert.split('-----')
    preamb = f"-----BEGIN RSA PRIVATE KEY-----"
    content = splits[2].replace(' ', '\n')
    epilogue = f"-----END RSA PRIVATE KEY-----\n"
    return f"{preamb}{content}{epilogue}"


def main():
    # Check that profile is set
    if 'AWS_DEFAULT_PROFILE' not in os.environ:
        print("Please set AWS_DEFAULT_PROFILE")
        exit(1)

    print(f"Retrieving onboarding details for thing type {thingType}")

    working_dir = "./"
    generate_nvram_bin(working_dir)

    try:
        flash_nvram(working_dir)
    finally:
        os.remove(os.path.join(working_dir, NVRAM_IN_FILE))
        os.remove(os.path.join(working_dir, NVRAM_BIN_FILE))


if __name__ == "__main__":
    main()
